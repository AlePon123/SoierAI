use rand::*;
use serenity::framework::standard::{macros::command, CommandResult};
use serenity::model::prelude::*;
use serenity::prelude::*;

const BALL_VARIANTS:[&str; 28] = [
   "шар сказал... да",
   "шар сказал... даже не сомневайся",
   "шар сказал... еще не время",
   "шар сказал... жениться тебе пора",
   "шар сказал... забудь об этом",
   "шар сказал... звучит сомнительно",
   "шар сказал... лучше даже не жди",
   "шар сказал... лучше не надейся на это",
   "шар сказал... лучше тебе не знать",
   "шар сказал... не пиши фигню",
   "шар сказал... неплохие перспективы, дерзай",
   "шар сказал... нет",
   "шар сказал... никогда",
   "шар сказал... нужно немножно потерпеть",
   "шар сказал... однозначно!",
   "шар сказал... ответ на это не очень приятный",
   "шар сказал... пора бы тебе отдохнуть",
   "шар сказал... поступай, как велит сердце",
   "шар сказал... прислушайся к голосу разума",
   "шар сказал... раньше было лучше",
   "шар сказал... спроси еще раз",
   "шар сказал... только если удачно сложатся звезды",
   "шар сказал... тут как угадаешь",
   "шар сказал... ты шутишь?!",
   "шар сказал... уже вот-вот",
   "шар сказал... это не точно",
   "шар сказал... это слишком сложно",
   "шар сказал... это точно",
];

#[command]
pub async fn ball(ctx: &Context, msg: &Message) -> CommandResult {
    let random_ball = || {
        let mut range = rand::thread_rng();
        let random = range.gen_range(0..BALL_VARIANTS.len());
        BALL_VARIANTS[random]
    };
    msg.channel_id.say(&ctx.http, random_ball()).await?;
    Ok(())
}
